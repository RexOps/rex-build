################################################################################
# Disclaimer: This file is heavyly work-in-progress
################################################################################
#
# Build script to build packages for the (R)?ex repository.
# It should be possible to build "all kind" of packages with this script
# At first deb and rpm.
#
# ------------------------------------------------------------------------------
#
# Usage:
#
# rex bundle --build=buildfile.yaml --branch=master
#
# ------------------------------------------------------------------------------
# vim: set syn=perl:

use Rex -feature => [ '0.45', 'exit_status', 'empty_groups' ];

#use Rex::Transaction;
use Test::More;
use Data::Dumper;
use IO::All;
use DateTime;
use PkgBuilder;
use DateTime;

do "auth.conf";

my $pid = $$;

################################################################################
# the tasks
################################################################################

task info => group => test => sub {

  my $op   = get_os_name;
  my $arch = get_os_arch;
  my $ver  = get_os_release;

  say "op> $op";
  say "arch> $arch";
  say "ver> $ver";
  say "environment> " . get_build_env();
};

task version_tag => sub {
  my $param = shift;

  if ( !exists $param->{version_tag} ) {
    die "No version tag specified.";
  }

  if ( !exists $param->{project} ) {
    die "No version tag specified.";
  }

  if ( !exists $param->{version_file} ) {
    die "No version file given.";
  }

  run "rm -rf tmp";
  mkdir "tmp";

  my $repository = "git\@github.com:RexOps/$param->{project}.git";

  Rex::Logger::info("Cloning $repository to tmp");
  run "cd tmp ; git clone $repository --branch master >/tmp/out.log 2>&1";

  my $version_file = "tmp/$param->{project}/$param->{version_file}";

  my $file_content = io($version_file)->slurp;
  my $new_version  = $param->{version_tag};
  $file_content =~ s/VERSION = "([^"]+)"/VERSION = "$new_version"/;

  Rex::Logger::info("Writing new version $new_version to $version_file");

  io($version_file) < $file_content;

  run "cd tmp/$param->{project} ; git add $param->{version_file} "
    . " ; git commit -m 'updated version'";

  run "cd tmp/$param->{project} ; perl Makefile.PL ; make ; make manifest ; "
    . "git add MANIFEST ; git commit -m 'updated manifest'";

  run "cd tmp/$param->{project} ; git push origin";

  run
    "cd tmp/$param->{project} ; git tag $param->{version_tag} ; git push origin $param->{version_tag}";
};

task release_files => config->{repo}->{server} => sub {
  my $param = shift;

  my $from = $param->{from};
  my $to   = $param->{to};

  die "no from or to parameter given." if ( !$from or !$to );

  my $dt  = DateTime->now;
  my $now = $dt->ymd('-');

  Rex::Logger::info(
    "Releasing files from $from to $to. This may take a while.");

  run "cd /srv/www/vhosts.d/$to.rex.linuxfiles.org ; "
    . " mv htdocs htdocs.$now ; "
    . " mv ../$from.rex.linuxfiles.org/htdocs . ; "
    . " cp -R htdocs ../$from.rex.linuxfiles.org/";

  Rex::Logger::info("Done releasing files.");
};

task release_to_cpan => sub {
  my $param = shift;

  die "no version given"    if ( !exists $param->{version} );
  die "no project given"    if ( !exists $param->{project} );
  die "no repository given" if ( !exists $param->{repository} );

  my $user = config->{pause}->{user};
  my $pw   = config->{pause}->{password};

  my $project = $param->{project};
  my $version = $param->{version};
  my $repo    = $param->{repository};

  Rex::Logger::info("Cloning repository: $repo");

  run "rm -rf tmp";

  mkdir "tmp";
  run "cd tmp ; git clone $repo . --branch $version >/tmp/out.log 2>&1";

  Rex::Logger::info("Creating dist file.");
  run "cd tmp && perl Makefile.PL && make manifest && make dist";
  if( $? != 0 ) {
    die "Error creating dist file.";
  }

  my $package = "\u$project-$version.tar.gz";
  Rex::Logger::info("Uploading $package to CPAN.");
  my $output = run "cpan-upload --user $user --password $pw tmp/$package 2>&1";
  if ( $? != 0 ) {
    print "$output\n";
    die "Error uploading $package.";
  }

  Rex::Logger::info("Uploaded $package to CPAN.");
};

task write_changelog => sub {
  my $param                = shift;
  my $repo                 = $param->{repo};
  my $new_tag              = $param->{new_version};
  my $commits              = $ENV{COMMITS};
  my $release_manager      = $param->{release_manager};
  my $release_manager_mail = $param->{release_manager_mail};

  run "rm -rf tmp";
  mkdir "tmp";

  run "cd tmp ; git clone $repo . >/tmp/out.log 2>&1";

  my $date = DateTime->now;

  my @changelog_entry;
  push @changelog_entry, $date->ymd("-") . " $release_manager <$release_manager_mail> ($new_tag)";

  for my $commit (split(/\n/, $commits)) {
    my @log_msg = run "cd tmp ; git log --format=%s -n 1 $commit";
    chomp @log_msg;
    my $msg = join("\n    ", @log_msg);
    say "New log message: $msg";
    push @changelog_entry, "  * $msg";
  }

  my $current_changelog = cat "tmp/ChangeLog";
  my $new_changelog     = join("\n", @changelog_entry) . "\n\n$current_changelog";

  file "tmp/ChangeLog", content => $new_changelog;

  # commit back
  run "cd tmp ; git add ChangeLog ; git commit -m 'updated changelog'";
  run "cd tmp ; git push origin";
};

task build_recipes_directory => config->{recipes}->{server} => sub {

  my $param   = shift;
  my $version = $param->{version};
  my $old_version = $param->{old_version};

  my ($main_version) = ($version =~ m/^(\d+\.\d+)/);

  my $repo = config->{recipes}->{repo};

  LOCAL {
    # create a new branch for the new version

    run "rm -rf tmp";
    mkdir "tmp";

    run "cd tmp ; git clone $repo . --branch $old_version >/tmp/out.log 2>&1";
    run "cd tmp ; git checkout -b $main_version";
    run "cd tmp ; git push origin $main_version";
  };

  # update documentation tree
  run "git fetch ; git checkout $version",
    cwd => "/opt/rex-recipes";

  run "perl create_dep_tree.pl $main_version ; mv modules.$main_version module/",
    cwd => "/opt/modules.rexify.org";

  run "perl create_index.pl localhost 9200 /opt/rex-recipes",
    cwd => "/opt/modules.rexify.org";

};

task prepare => group => test => sub {

  my $param = shift;

  my $op   = get_os_name;
  my $arch = get_os_arch;
  my $ver  = get_os_release;

  say "op> $op";
  say "arch> $arch";
  say "ver> $ver";

  my ( $default_build_file, $double_parsed_build_file ) =
    build_config( $param->{build} );

################################################################################
  # register repositories, to use for build dependencies
################################################################################

  Rex::Logger::info("Registering some repositories");

  if ( exists config->{repo}->{add}->{ get_build_env() }->{ lc($op) }
    && exists config->{repo}->{add}->{ get_build_env() }->{ lc($op) }->{$ver}
    && exists config->{repo}->{add}->{ get_build_env() }->{ lc($op) }->{$ver}
    ->{$arch} )
  {

    say Dumper(
      config->{repo}->{add}->{ get_build_env() }->{ lc($op) }->{$ver}->{$arch}
    );

    if (is_mageia) {
      my $url = config->{repo}->{add}->{ get_build_env() }->{ lc($op) }->{$ver}
        ->{$arch}->{url};
      my $line = "rex $url {\n  key-ids: 16547F8C\n}\n";
      cp "/etc/urpmi/urpmi.cfg", "/etc/urpmi/urpmi.cfg.rex.bak";
      append_if_no_such_line "/etc/urpmi/urpmi.cfg",
        line   => $line,
        regexp => qr/rex $url/;
    }
    else {

      eval {
        repository
          add => "rex",
          ( distro => $ver ),
          %{ config->{repo}->{add}->{ get_build_env() }->{ lc($op) }->{$ver}
            ->{$arch} };
        1;
      } or do {
        eval { repository remove => "rex"; };
      };

    }

  }
  else {

    say Dumper( config->{repo}->{add}->{ get_build_env() }->{ lc($op) } );
    eval {
      repository
        add => "rex",
        ( distro => $ver ),
        %{ config->{repo}->{add}->{ get_build_env() }->{ lc($op) } }
        if ( exists config->{repo}->{add}->{ get_build_env() }->{ lc($op) } );
      1;
    } or do {
      eval { repository remove => "rex"; };
    };

  }

  if (is_debian) {
    run
      "wget -O - http://rex.linux-files.org/DPKG-GPG-KEY-REXIFY-REPO | apt-key add -";
  }
  else {
    if ( lc($op) eq "centos" && $ver =~ m/^5/ ) {
      run
        "rpm --import http://rex.linux-files.org/RPM-GPG-KEY-REXIFY-REPO.CENTOS5";
    }
    else {
      run
        "rpm --import http://rex.linux-files.org/RPM-GPG-KEY-REXIFY-REPO.CENTOS6";
    }
  }

  if ( $? != 0 ) {
    die("Error registering gpg key.");
  }

  eval { update_package_db; 1; } or do { repository remove => "rex"; };

################################################################################
  # install build dependencies
################################################################################

  Rex::Logger::info("Installing basic dependencies.");

  my $pkg_build_dep;

  if (
    exists $double_parsed_build_file->{requires}->{ lc($op) }->{$ver}->{$arch}
    ->{build} )
  {
    $pkg_build_dep =
      $double_parsed_build_file->{requires}->{ lc($op) }->{$ver}->{$arch}
      ->{build};
  }

  elsif (
    exists $double_parsed_build_file->{requires}->{ lc($op) }->{$ver}->{build} )
  {
    $pkg_build_dep =
      $double_parsed_build_file->{requires}->{ lc($op) }->{$ver}->{build};
  }

  elsif ( exists $double_parsed_build_file->{requires}->{ lc($op) }->{build} ) {
    $pkg_build_dep =
      $double_parsed_build_file->{requires}->{ lc($op) }->{build};
  }

  else {
    Rex::Logger::info("No build dependencies found.");
  }

  print Dumper $pkg_build_dep;

  $pkg_build_dep = [
    map {
      if ( ref $_ eq "HASH" ) {
        my ($key) = keys %{$_};
        $_ = $_->{$key};
      }

      $_
    } @{$pkg_build_dep}
  ];

  print Dumper $pkg_build_dep;

  pkg $pkg_build_dep, ensure => "latest"
    if ($pkg_build_dep);

  # install some additional packages that are needed for the build
  my $add_pkgs = case $op, {
    qr{centos|redhat|fedora}i => [
      "ntp",  "rpm-build", "expect",   "gcc",
      "make", "automake",  "autoconf", "bison",
      "flex", "m4",        "openssh-clients"
      ],
      qr{mageia}i => [
      "ntp",  "rpm-build", "expect",          "gcc",
      "make", "automake",  "autoconf",        "bison",
      "flex", "m4",        "openssh-clients", "gnupg",
      "rpm-sign"
      ],
      qr{suse}i => [
      "ntp",  "rpm-build", "expect",   "gcc",
      "make", "automake",  "autoconf", "bison",
      "flex", "m4"
      ],
      default => [
      "ntpdate", "expect", "gcc", "make", "automake", "autoconf",
      "bison",   "flex",   "m4"
      ],
  };

  install $add_pkgs;

  if (is_redhat) {
    Rex::Logger::info("Installing some Fedora dependencies...");
    eval { install "perl-ExtUtils-MakeMaker"; };
    eval { install "rpm-sign"; };
  }

################################################################################
  # download tarball from website
################################################################################

  Rex::Logger::info("Downloading tarball: $double_parsed_build_file->{source}");
  LOCAL {
    download $double_parsed_build_file->{source}, ".build.$pid/";
  };

################################################################################
  # upload source tarball
################################################################################

  Rex::Logger::info("Uploading buildfiles to build host");
  my $upload_tarball_dir = config->{build}->{source_directory}->{ lc($op) };
  mkdir $upload_tarball_dir;

  if ( $op =~ m/centos|redhat|fedora|suse|mageia/i ) {
    mkdir "$upload_tarball_dir/../BUILD";
    mkdir "$upload_tarball_dir/../RPMS";
    mkdir "$upload_tarball_dir/../RPMS/$arch";
    mkdir "$upload_tarball_dir/../SPECS";
    mkdir "$upload_tarball_dir/../SRPMS";

    rmdir "/root/.local";
  }

  Rex::Logger::info("Uploading: .build.$pid -> $upload_tarball_dir");
  sync_up ".build.$pid/", $upload_tarball_dir;

  Rex::Logger::info(
    "Uploading: " . config->{build}->{files} . "/" . lc($op) . " -> /root" );
  sync_up config->{build}->{files} . "/" . lc($op), "/root";

  sync_time;

  my $pkg_name  = $double_parsed_build_file->{name}->{ lc($op) };
  my $buildroot = "/tmp/build-$pkg_name-$pid";
  file "/tmp/build",
    content => template(
    "expect/" . lc($op) . ".expect",
    buildroot => $buildroot,
    %{ config->{build}->{gnupg} }
    ),
    mode => 755;

################################################################################
  # create build file out of generic description file
  # build files can be: spec (rpm), debian build instruction directory
################################################################################

  Rex::Logger::info("Creating build files");
  create_build_files($param);

################################################################################
  # also prepare for package signing / needed for example by
  # debian and ubuntu
################################################################################
  if ( lc($op) eq "ubuntu" || lc($op) eq "debian" ) {
    prepare_repo_server();
  }

};

################################################################################
# build the package
################################################################################
task build => group => test => sub {

  my $param = shift;
  my $op    = get_os_name;
  my $ver   = get_os_release;
  my $arch  = get_os_arch;

  say "op> $op";
  say "arch> $arch";
  say "ver> $ver";

  my ( $default_build_file, $double_parsed_build_file ) =
    build_config( $param->{build} );

  my $pkg_name  = $double_parsed_build_file->{name}->{ lc($op) };
  my $spec_file = "/root/build/$pkg_name.spec";
  my @out;

  Rex::Logger::info("Building package $pkg_name");

  if ( is_file($spec_file) ) {
    say cat "$spec_file";
    @out = split( /\n/, run_or_die("/tmp/build $spec_file") );
  }
  else {
    @out = split( /\n/, run_or_die("cd /root/build ; /tmp/build") );
  }

  # dpkg-deb: building package `libssh2' in `../libssh2_1.4.2_amd64.deb'.
  my @files = grep { m/^Wrote: (.*)$/ && ( $_ = $1 ); } @out;

  my ( $src_file, $pkg_file );
  if (@files) {
    ($src_file) = grep { m/\.src\.rpm/ } @files;
    ($pkg_file) = grep { m/\.$arch\.rpm/ } @files;
  }

  @files =
    grep { m/^dpkg-deb: building package `.*?' in `(.*?)'.$/ && ( $_ = $1 ); }
    @out;
  if (@files) {
    $pkg_file = "/root/build/$files[0]";
  }

  if ( !@files ) {
    my $upload_tarball_dir = config->{build}->{source_directory}->{ lc($op) };
    Rex::Logger::info("Didn't find package file in output...");
    my $version = $double_parsed_build_file->{version};
    if ( exists $double_parsed_build_file->{pkgversion}->{ lc($op) } ) {
      $version = $double_parsed_build_file->{pkgversion}->{ lc($op) };
    }

    my $file =
        "$upload_tarball_dir/../RPMS/"
      . $arch . "/"
      . $double_parsed_build_file->{name}->{ lc($op) } . "-"
      . $version . "-"
      . $double_parsed_build_file->{release}
      . ".$arch.rpm";

    Rex::Logger::info("  Trying with: $file");
    if ( is_file($file) ) {
      $pkg_file = $file;
      Rex::Logger::info("  Found file: $file");
    }

    if ( $arch =~ m/i[3456]86/ ) {
      for my $_a (qw/i386 i486 i586 i686/) {
        $file =
            "$upload_tarball_dir/../RPMS/"
          . $_a . "/"
          . $double_parsed_build_file->{name}->{ lc($op) } . "-"
          . $version . "-"
          . $double_parsed_build_file->{release}
          . ".$_a.rpm";

        Rex::Logger::info("  Trying with: $file");
        if ( is_file($file) ) {
          $pkg_file = $file;
          Rex::Logger::info("  Found file: $file");
        }
      }
    }
  }

  LOCAL {
    mkdir ".packages.$pid/" . lc($op);
  };

  Rex::Logger::info("Downloading package: $pkg_file");

  #download $src_file, ".packages.$pid/";
  download $pkg_file, ".packages.$pid/";
};

################################################################################
# do some cleanup after build
# throw away some temporary directories and files
################################################################################
task clean => sub {
  rmdir ".build.$pid";
  rmdir ".packages.$pid";
};

################################################################################
# publish the new package to the package server
################################################################################
task publish => config->{repo}->{server} => sub {
  my $op   = get_os_name;
  my $ver  = get_os_release;
  my $arch = get_os_arch;

  say "op> $op";
  say "arch> $arch";
  say "ver> $ver";

  Rex::Logger::info("Publishing package to repository server");

  if ( $op =~ m/centos|redhat|fedora|suse|mageia/i ) {
    my $repo_name = config->{repo}->{name};
    my $repo_path = doc_root . "/$op/$ver/$repo_name/$arch";

    mkdir $repo_path,
      owner => "www-data",
      group => "www-data",
      mode  => 755;

    Rex::Logger::info("Uploading to: $repo_path ...");
    sync_up ".packages.$pid/", $repo_path;

    Rex::Logger::info("Creating repository data files ...");

    if ( is_mageia($op) ) {
      run_or_die "cd $repo_path ; genhdlist2 --xml-info .";
    }
    else {
      run_or_die "cd $repo_path ; rm repodata/repomd.xml.asc ; createrepo .";

      my $key = config->{repo}->{sign}->{ lc($op) }->{key};
      Rex::Logger::info("Signing repository with key: $key ...");
      run_or_die
        "cd $repo_path ; gpg --default-key $key -a --batch --passphrase "
        . config->{build}->{gnupg}->{pass}
        . " --detach-sign repodata/repomd.xml";
    }

  }

  if ( lc($op) eq "ubuntu" || lc($op) eq "debian" ) {

    if ( $arch eq "x86_64" ) {    # rewrite arch for debian/ubuntu
      $arch = "amd64";
    }

    if ( $arch eq "i686" ) {      # rewrite arch for debian/ubuntu
      $arch = "i386";
    }

    my $repo_name = config->{repo}->{name};
    my $repo_path = doc_root . "/" . lc($op) . "/pool/$ver/$repo_name";
    my $dist_path =
      doc_root . "/" . lc($op) . "/dists/$ver/$repo_name/binary-$arch";

    mkdir $repo_path,
      owner => "www-data",
      group => "www-data",
      mode  => 755;

    mkdir $dist_path,
      owner => "www-data",
      group => "www-data",
      mode  => 755;

    Rex::Logger::info("Uploading to: $repo_path ...");
    sync_up ".packages.$pid/", $repo_path;

    file "/root/aptgenerate.$ver.conf",
      content => template( "templates/aptgenerate.conf.tpl", dist => $ver );

    file "/root/aptftp.$ver.conf",
      content => template( "templates/aptftp.conf.tpl", dist => $ver );

    my $doc_root = doc_root . "/" . lc($op);
    run
      "apt-ftparchive generate -c=/root/aptftp.$ver.conf /root/aptgenerate.$ver.conf",
      cwd => $doc_root;
    run
      "apt-ftparchive release -c=/root/aptftp.$ver.conf dists/$ver >dists/$ver/Release",
      cwd => $doc_root;

    rm "$doc_root/dists/$ver/Release.gpg";

    file "/root/sign_release",
      content => template(
      "expect/" . lc($op) . ".sign_release.expect",
      dist => $ver,
      %{ config->{build}->{gnupg} }
      ),
      owner => "root",
      group => "root",
      mode  => 755;

    run "/root/sign_release", cwd => $doc_root;

    rm "$doc_root/packages-i386.db";
    rm "$doc_root/packages-amd64.db";
  }
};

################################################################################
# run everything in a transaction
################################################################################
task bundle => sub {

  #  transaction {
  do_task [
    qw/
      info
      prepare
      build
      publish
      clean
      /
  ];

  #  };

};

################################################################################
# prepare repository server
################################################################################
task prepare_repo_server => config->{repo}->{server} => sub {
  eval {
    install [
      qw/
        gnupg
        createrepo
        apache2
        /
    ];
  };

  file "/root/gnupg.keys",
    source => config->{build}->{files} . "/gnupg.keys",
    mode   => 600;

  run "gpg --import < /root/gnupg.keys";

  unlink "/root/gnupg.keys";
};

################################################################################
# build tar.gz archive
################################################################################
task archive => config->{repo}->{server} => sub {
  my $params = shift;
  my $pkg;

  my $build_project = $params->{project} || "Rex";
  my $build_dir = "\L$build_project";

  LOCAL {
    Rex::Logger::info("Cloning $build_project repository...");

    if ( -d $build_dir ) {
      Rex::Logger::info("Cleaning up...");
      rmdir $build_dir;
    }

    my $branch = $params->{branch} || "master";

    run
      "git clone git\@github.com:RexOps/$build_project.git $build_dir --branch $branch >/tmp/out.log 2>&1";
    run "cd $build_dir; perl Makefile.PL && make && make dist && cd ..";
    ($pkg) = glob("$build_dir/*.tar.gz");

    Rex::Logger::info("Found package file: $pkg");

  };

  if ($pkg) {
    mkdir doc_root . "/source",
      owner => "www-data",
      group => "www-data";

    Rex::Logger::info( "Uploading $pkg to " . doc_root . "/source" );
    upload $pkg, doc_root . "/source";
  }
  else {
    Rex::Logger::info( "No package found.", "error" );
    die("No package found.");
  }

};

################################################################################
# special authentication for repository server
################################################################################
auth
  for      => "publish",
  user     => config->{repo}->{user},
  password => config->{repo}->{password};

auth
  for      => "prepare_repo_server",
  user     => config->{repo}->{user},
  password => config->{repo}->{password};

auth
  for      => "archive",
  user     => config->{repo}->{user},
  password => config->{repo}->{password};

auth
  for      => "release_files",
  user     => config->{repo}->{user},
  password => config->{repo}->{password};

auth
  for => "build_recipes_directory", %{ config->{recipes}->{user} };

################################################################################
# the end
################################################################################
"The End";
