################################################################################
# Disclaimer: This file is heavyly work-in-progress
################################################################################
#
# Build script to build packages for the (R)?ex repository.
# It should be possible to build "all kind" of packages with this script
# At first deb and rpm.
#
# ------------------------------------------------------------------------------
#
# Usage:
#
# rex bundle --build=buildfile.yaml
#
# ------------------------------------------------------------------------------
# vim: set syn=perl:

use Rex -feature => ['0.42', 'exit_status'];
#use Rex::Transaction;
use Test::More;
use Data::Dumper;
use IO::All;
use PkgBuilder;

do "auth.conf";

my $pid = $$;


################################################################################
# the tasks
################################################################################

task info => group => test => sub {

   my $op   = get_os_name;
   my $arch = get_os_arch;
   my $ver  = get_os_release;

   say "op> $op";
   say "arch> $arch";
   say "ver> $ver";
};

task prepare => group => test => sub {

   my $param = shift;

   my $op   = get_os_name;
   my $arch = get_os_arch;
   my $ver  = get_os_release;


   my ($default_build_file, $double_parsed_build_file) = build_config($param->{build});

################################################################################
# register repositories, to use for build dependencies
################################################################################

   Rex::Logger::info("Registering some repositories");

   if(exists config->{repo}->{add}->{lc($op)}
      && exists config->{repo}->{add}->{lc($op)}->{$ver}
      && exists config->{repo}->{add}->{lc($op)}->{$ver}->{$arch}) {

      repository add => "rex", (distro => $ver), %{ config->{repo}->{add}->{lc($op)}->{$ver}->{$arch} };

   }
   else {

      repository add => "rex", (distro => $ver), %{ config->{repo}->{add}->{lc($op)} }
         if(exists config->{repo}->{add}->{lc($op)});

   }

   if(is_debian) {
      run "wget -O - http://rex.linux-files.org/DPKG-GPG-KEY-REXIFY-REPO | apt-key add -";
   }
   else {
      if(lc($op) eq "centos" && $ver =~ m/^5/) {
         run "rpm --import http://rex.linux-files.org/RPM-GPG-KEY-REXIFY-REPO.CENTOS5";
      }
      else {
         run "rpm --import http://rex.linux-files.org/RPM-GPG-KEY-REXIFY-REPO.CENTOS6";
      }
   }

   if($? != 0) {
      die("Error registering gpg key.");
   }

   eval { update_package_db; 1; } or do { repository remove => "rex"; };

################################################################################
# install build dependencies
################################################################################

   Rex::Logger::info("Installing basic dependencies.");

   my $pkg_build_dep;

   if(exists $double_parsed_build_file->{requires}->{lc($op)}->{$ver}->{$arch}->{build}) {
      $pkg_build_dep = $double_parsed_build_file->{requires}->{lc($op)}->{$ver}->{$arch}->{build};
   }

   elsif(exists $double_parsed_build_file->{requires}->{lc($op)}->{$ver}->{build}) {
      $pkg_build_dep = $double_parsed_build_file->{requires}->{lc($op)}->{$ver}->{build};
   }

   elsif(exists $double_parsed_build_file->{requires}->{lc($op)}->{build}) {
      $pkg_build_dep = $double_parsed_build_file->{requires}->{lc($op)}->{build};
   }

   else {
      Rex::Logger::info("No build dependencies found.");
   }

   install $pkg_build_dep if($pkg_build_dep);

   # install some additional packages that are needed for the build
   my $add_pkgs = case $op, {
      qr{centos|redhat|fedora}i => ["ntp", "rpm-build", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4", "openssh-clients"],
      qr{mageia}i => ["ntp", "rpm-build", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4", "openssh-clients", "gnupg", "rpm-sign"],
      qr{suse}i          => ["ntp", "rpm-build", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4"],
      default            => ["ntpdate", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4"],
   };

   install $add_pkgs;

   if(is_redhat) {
      Rex::Logger::info("Installing some Fedora dependencies...");
      eval { install "perl-ExtUtils-MakeMaker"; };
      eval { install "rpm-sign"; };
   }

################################################################################
# download tarball from website
################################################################################

   Rex::Logger::info("Downloading tarball: $double_parsed_build_file->{source}");
   LOCAL {
      download $double_parsed_build_file->{source}, ".build.$pid/";
   };

################################################################################
# upload source tarball
################################################################################

   Rex::Logger::info("Uploading buildfiles to build host");
   my $upload_tarball_dir = config->{build}->{source_directory}->{lc($op)};
   mkdir $upload_tarball_dir;

   if($op =~ m/centos|redhat|fedora|suse|mageia/i) {
      mkdir "$upload_tarball_dir/../BUILD";
      mkdir "$upload_tarball_dir/../RPMS";
      mkdir "$upload_tarball_dir/../RPMS/$arch";
      mkdir "$upload_tarball_dir/../SPECS";
      mkdir "$upload_tarball_dir/../SRPMS";

      rmdir "/root/.local";
   }

   Rex::Logger::info("Uploading: .build.$pid -> $upload_tarball_dir");
   sync_up ".build.$pid/", $upload_tarball_dir;

   Rex::Logger::info("Uploading: " . config->{build}->{files} . "/" . lc($op) . " -> /root");
   sync_up config->{build}->{files} . "/" . lc($op), "/root";

   sync_time;

   my $pkg_name = $double_parsed_build_file->{name}->{lc($op)};
   my $buildroot = "/tmp/build-$pkg_name-$pid";
   file "/tmp/build",
      content => template("expect/" . lc($op) . ".expect", buildroot => $buildroot, %{ config->{build}->{gnupg} }),
      mode    => 755;

################################################################################
# create build file out of generic description file
# build files can be: spec (rpm), debian build instruction directory
################################################################################

   Rex::Logger::info("Creating build files");
   create_build_files($param);

################################################################################
# also prepare for package signing / needed for example by 
# debian and ubuntu
################################################################################
   if(lc($op) eq "ubuntu" || lc($op) eq "debian") {
      prepare_repo_server();
   }

};


################################################################################
# build the package
################################################################################
task build => group => test => sub {

   my $param = shift;
   my $op    = get_os_name;
   my $ver   = get_os_release;
   my $arch  = get_os_arch;


   my ($default_build_file, $double_parsed_build_file) = build_config($param->{build});

   my $pkg_name = $double_parsed_build_file->{name}->{lc($op)};
   my $spec_file = "/root/build/$pkg_name.spec";
   my @out;

   Rex::Logger::info("Building package $pkg_name");

   if(is_file($spec_file)) {
      say cat "$spec_file";
      @out = split(/\n/, run_or_die("/tmp/build $spec_file"));
   }
   else {
      @out = split(/\n/, run_or_die("cd /root/build ; /tmp/build"));
   }

# dpkg-deb: building package `libssh2' in `../libssh2_1.4.2_amd64.deb'.
   my @files = grep { m/^Wrote: (.*)$/ && ($_ = $1); } @out;

   my ($src_file, $pkg_file);
   if(@files) {
      ($src_file) = grep { m/\.src\.rpm/ } @files;
      ($pkg_file) = grep { m/\.$arch\.rpm/ } @files;
   }

   @files = grep { m/^dpkg-deb: building package `.*?' in `(.*?)'.$/ && ($_ = $1); } @out;
   if(@files) {
      $pkg_file = "/root/build/$files[0]";
   }

   if(!@files) {
      my $upload_tarball_dir = config->{build}->{source_directory}->{lc($op)};
      Rex::Logger::info("Didn't find package file in output...");
      my $file = "$upload_tarball_dir/../RPMS/"
                     . $arch 
                     . "/" 
                     . $double_parsed_build_file->{name}->{lc($op)}
                     . "-" 
                     . $double_parsed_build_file->{version} 
                     . "-" 
                     . $double_parsed_build_file->{release} 
                     . ".$arch.rpm";

      Rex::Logger::info("   Trying with: $file");
      if(is_file($file)) {
         $pkg_file = $file;
         Rex::Logger::info("   Found file: $file");
      }

      if($arch =~ m/i[3456]86/) {
         for my $_a (qw/i386 i486 i586 i686/) {
            $file = "$upload_tarball_dir/../RPMS/"
                           . $_a
                           . "/" 
                           . $double_parsed_build_file->{name}->{lc($op)}
                           . "-" 
                           . $double_parsed_build_file->{version} 
                           . "-" 
                           . $double_parsed_build_file->{release} 
                           . ".$_a.rpm";

            Rex::Logger::info("   Trying with: $file");
            if(is_file($file)) {
               $pkg_file = $file;
               Rex::Logger::info("   Found file: $file");
            }
         }
      }
   }

   LOCAL {
      mkdir ".packages.$pid/" . lc($op);
   };

   Rex::Logger::info("Downloading package: $pkg_file");
   #download $src_file, ".packages.$pid/";
   download $pkg_file, ".packages.$pid/";
};

################################################################################
# do some cleanup after build
# throw away some temporary directories and files
################################################################################
task clean => sub {
   rmdir ".build.$pid";
   rmdir ".packages.$pid";
};

################################################################################
# publish the new package to the package server
################################################################################
task publish => config->{repo}->{server} => sub {
   my $op   = get_os_name;
   my $ver  = get_os_release;
   my $arch = get_os_arch;

   Rex::Logger::info("Publishing package to repository server");
   
   if($op =~ m/centos|redhat|fedora|suse|mageia/i) {
      my $repo_name = config->{repo}->{name};
      my $repo_path = config->{repo}->{doc_root} . "/$op/$ver/$repo_name/$arch";

      mkdir $repo_path,
         owner => "www-data",
         group => "www-data",
         mode  => 755;

      Rex::Logger::info("Uploading to: $repo_path ...");
      sync_up ".packages.$pid/", $repo_path;

      Rex::Logger::info("Creating repository data files ...");

      if(is_mageia($op)) {
         run_or_die "cd $repo_path ; genhdlist2 --xml-info .";
      }
      else {
         run_or_die "cd $repo_path ; rm repodata/repomd.xml.asc ; createrepo .";

         my $key = config->{repo}->{sign}->{lc($op)}->{key};
         Rex::Logger::info("Signing repository with key: $key ...");
         run_or_die "cd $repo_path ; gpg --default-key $key -a --batch --passphrase " . config->{build}->{gnupg}->{pass} . " --detach-sign repodata/repomd.xml";
      }

   }

   if(lc($op) eq "ubuntu" || lc($op) eq "debian") {

      if($arch eq "x86_64") { # rewrite arch for debian/ubuntu
         $arch = "amd64";
      }

      if($arch eq "i686") { # rewrite arch for debian/ubuntu
         $arch = "i386";
      }

      my $repo_name = config->{repo}->{name};
      my $repo_path = config->{repo}->{doc_root} . "/" . lc($op) . "/pool/$ver/$repo_name";
      my $dist_path = config->{repo}->{doc_root} . "/" . lc($op) . "/dists/$ver/$repo_name/binary-$arch";

      mkdir $repo_path,
         owner => "www-data",
         group => "www-data",
         mode  => 755;

      mkdir $dist_path,
         owner => "www-data",
         group => "www-data",
         mode  => 755;

      Rex::Logger::info("Uploading to: $repo_path ...");
      sync_up ".packages.$pid/", $repo_path;

      file "/root/aptgenerate.$ver.conf",
         content => template("templates/aptgenerate.conf.tpl", dist => $ver);

      file "/root/aptftp.$ver.conf",
         content => template("templates/aptftp.conf.tpl", dist => $ver);

      my $doc_root = config->{repo}->{doc_root} . "/" . lc($op);
      run "apt-ftparchive generate -c=/root/aptftp.$ver.conf /root/aptgenerate.$ver.conf",   cwd => $doc_root;
      run "apt-ftparchive release -c=/root/aptftp.$ver.conf dists/$ver >dists/$ver/Release", cwd => $doc_root;

      rm "$doc_root/dists/$ver/Release.gpg";

      file "/root/sign_release",
         content => template("expect/" . lc($op) . ".sign_release.expect", dist => $ver, %{ config->{build}->{gnupg} }),
         owner   => "root",
         group   => "root",
         mode    => 755;

      run "/root/sign_release", cwd => $doc_root;

      rm "$doc_root/packages-i386.db";
      rm "$doc_root/packages-amd64.db";
   }
};


################################################################################
# run everything in a transaction
################################################################################
task bundle => sub {

#   transaction {
      do_task [qw/
         info
         prepare
         build
         publish
         clean
      /];
#   };

};

################################################################################
# prepare repository server
################################################################################
task prepare_repo_server => config->{repo}->{server} => sub {
   eval {
      install [qw/
         gnupg
         createrepo
         apache2
      /];
   };

   file "/root/gnupg.keys",
      source => config->{build}->{files} . "/gnupg.keys",
      mode   => 600;

   run "gpg --import < /root/gnupg.keys";

   unlink "/root/gnupg.keys";
};

################################################################################
# special authentication for repository server
################################################################################
auth for => "publish",
   user => config->{repo}->{user},
   password => config->{repo}->{password};

auth for => "prepare_repo_server",
   user => config->{repo}->{user},
   password => config->{repo}->{password};




################################################################################
# the end
################################################################################
"The End";
