################################################################################
# Disclaimer: This file is heavyly work-in-progress
################################################################################
#
# Build script to build packages for the (R)?ex repository.
# It should be possible to build "all kind" of packages with this script
# At first deb and rpm.
#
# ------------------------------------------------------------------------------
#
# Usage:
#
# rex bundle --build=buildfile.yaml
#
# ------------------------------------------------------------------------------
# vim: set syn=perl:

use Rex -feature => '0.42';
use Rex::Transaction;
use Test::More;
use Data::Dumper;
use IO::All;
use PkgBuilder;

do "auth.conf";

my $pid = $$;


################################################################################
# the tasks
################################################################################

task prepare => group => test => sub {

   my $param = shift;


################################################################################
# create build file out of generic description file
# build files can be: spec (rpm), debian build instruction directory
################################################################################

   my $op = get_os_name;

   my $upload_tarball_dir = config->{build}->{source_directory}->{lc($op)};
   my $content;

   my ($default_build_file, $double_parsed_build_file) = build_config($param->{build});

   mkdir "/root/build";
   mkdir config->{build}->{source_directory}->{lc($op)};

   my $buildroot = "/tmp/build-$double_parsed_build_file->{name}-$pid";
   mkdir $buildroot;


   file "/root/build/" . $double_parsed_build_file->{name} . ".spec",
      content => parse_template("templates/spec.tpl", 
                        buildroot  => $buildroot,
                        os         => $op,
                        data       => $default_build_file,
                        sourceroot => $upload_tarball_dir, %{ $default_build_file }),
      owner   => "root",
      group   => "root",
      mode    => 640;

################################################################################
# register repositories, to use for build dependencies
################################################################################

   repository add => "rex", %{ config->{repo}->{add}->{lc($op)} }
      if(exists config->{repo}->{add}->{lc($op)});

   eval { update_package_db; };

################################################################################
# install build dependencies
################################################################################

   install $double_parsed_build_file->{requires}->{lc($op)}->{build};

   # install some additional packages that are needed for the build
   my $add_pkgs = case $op, {
      qr{centos|redhat}i => ["ntp", "rpm-build", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4"],
      default            => ["ntpd", "expect", "gcc", "make", "automake", "autoconf", "bison", "flex", "m4"],
   };

   install $add_pkgs;

################################################################################
# download tarball from website
################################################################################
   LOCAL {
      download $double_parsed_build_file->{source}, ".build.$pid/";
   };

################################################################################
# upload source tarball
################################################################################


   sync_up ".build.$pid/", $upload_tarball_dir;
   sync_up config->{build}->{files} . "/" . lc($op), "/root";

   run_or_die "ntpdate pool.ntp.org";

   file "/tmp/build",
      content => template("expect/" . lc($op) . ".expect", buildroot => $buildroot, %{ config->{build}->{gnupg} }),
      mode    => 755;
};


################################################################################
# build the package
################################################################################
task build => group => test => sub {

   my $param = shift;
   my $op    = get_os_name;
   my $ver   = get_os_release;
   my $arch  = get_os_arch;

   my ($default_build_file, $double_parsed_build_file) = build_config($param->{build});

   my @out   = split(/\n/, run_or_die("/tmp/build /root/build/$double_parsed_build_file->{name}.spec"));
   my @files = grep { m/^Wrote: (.*)$/ && ($_ = $1); } @out;


   my ($src_file) = grep { m/\.src\.rpm/ } @files;
   my ($pkg_file) = grep { m/\.$arch\.rpm/ } @files;

   LOCAL {
      mkdir ".packages.$pid/" . lc($op);
   };
   #download $src_file, ".packages.$pid/";
   download $pkg_file, ".packages.$pid/";
};

################################################################################
# do some cleanup after build
# throw away some temporary directories and files
################################################################################
task clean => sub {
   rmdir ".build.$pid";
   rmdir ".packages.$pid";
};

################################################################################
# publish the new package to the package server
################################################################################
task publish => config->{repo}->{server} => sub {
   my $op   = get_os_name;
   my $ver  = get_os_release;
   my $arch = get_os_arch;

   my $repo_name = config->{repo}->{name};
   my $repo_path = config->{repo}->{doc_root} . "/$op/$ver/$repo_name/$arch";

   mkdir $repo_path,
      owner => "www-data",
      group => "www-data",
      mode  => 755;

   Rex::Logger::info("Uploading to: $repo_path ...");
   sync_up ".packages.$pid/", $repo_path;

   Rex::Logger::info("Creating repository data files ...");
   run_or_die "cd $repo_path ; rm repodata/repomd.xml.asc ; createrepo .";

   my $key = config->{repo}->{sign}->{lc($op)}->{key};
   Rex::Logger::info("Signing repository with key: $key ...");
   run_or_die "cd $repo_path ; gpg --default-key $key -a --batch --passphrase " . config->{build}->{gnupg}->{pass} . " --detach-sign repodata/repomd.xml";
};


################################################################################
# run everything in a transaction
################################################################################
task bundle => sub {

   transaction {
      do_task [qw/
         prepare
         build
         publish
         clean
      /];
   };

};

################################################################################
# prepare repository server
################################################################################
task prepare_repo_server => config->{repo}->{server} => sub {
   install [qw/
      gnupg
      createrepo
      apache2
   /];

   file "/root/gnupg.keys",
      source => config->{build}->{files} . "/gnupg.keys",
      mode   => 600;

   run "gpg --import < /root/gnupg.keys";

   unlink "/root/gnupg.keys";
};

################################################################################
# special authentication for repository server
################################################################################
auth for => "publish",
   user => config->{repo}->{user},
   password => config->{repo}->{password};

auth for => "prepare_repo_server",
   user => config->{repo}->{user},
   password => config->{repo}->{password};




################################################################################
# the end
################################################################################
"The End";
